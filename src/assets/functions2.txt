npm i firebase

Firebase mappa:
config mappa:
firebaseConfig.js:
{
    "apiKey": "AIzaSyBVSnxIJHlvQxLl6RgRtueOSc8K3lt5EN8",
    "authDomain": "jsx-basics.firebaseapp.com",
    "projectId": "jsx-basics",
    "storageBucket": "jsx-basics.firebasestorage.app",
    "messagingSenderId": "67550982438",
    "appId": "1:67550982438:web:57f2ac648468df22de51e7",
    "measurementId": "G-HRJ34GJ34H"
}

firebaseApp almappa:
getFirebaseApp.js:
import { initializeApp } from "firebase/app";
import firebaseConfig from '../config/firebaseConfig.json'


let firebaseApp = null;

//singleton
export default function getFirebaseApp(){

    if(!firebaseApp){
        firebaseApp= initializeApp(firebaseConfig);
    }

    return firebaseApp;
}

firestoreDb almappa:
appDb.js: import getFirebaseApp from "../firebaseApp/getFirebaseApp";
import { getFirestore } from "firebase/firestore";
let appDb = null;

export default function getAppDb(){
    if(!appDb){
        appDb = getFirestore( getFirebaseApp() )
    }

    return appDb;
}

fő firebase mappába ne felejtsd az index.js-t az exportáláshoz


firebase useEffect:
useEffect(() => {
    const fetchData = async () => {
        const db = getAppDb();
        const foglalasokFire = collection(db, 'foglalasok');
        try {
            const foglalasokSnapshot = await getDocs(foglalasokFire);
            const foglalasokData = foglalasokSnapshot.docs.map(item => item.data());
            console.log(foglalasokData);
            setFoglalasok(foglalasokData);
        } catch (error) {
            console.error('Hiba történt az adatok lekérdezésekor', error);
        }
    };

    fetchData();
}, []); 


form felépítése:

  <form onSubmit={handleSubmit}>
                <label htmlFor="name">Name</label>
                <input 
                    type="text"
                    id="name"
                    name="username"
                    value={inputValues.username}
                    onChange={handleChange}
                />

                <label htmlFor="age">Age</label>
                <input 
                    type="number"
                    id="age"
                    name="age"
                    value={inputValues.age}
                    onChange={handleChange}
                />

                <label htmlFor="city">City/Village</label>
                <input 
                    type="text"
                    id="city"
                    name="city"
                    value={inputValues.city}
                    onChange={handleChange}
                />

                <button type="submit">Beküldés</button>
            </form>


form adatok kinyerése: 

const [inputValues, setInputValues] = useState({
            username: '',
            age: '',
            city:''
        })

    const handleChange=(event)=>{

        const name = event.target.name;
        const value = event.target.value;
        setInputValues(values=>({...values,[name]:value} ))
    }
    
    const handleSubmit = async (event)=>{
        event.preventDefault();
        const newUser= {username: inputValues.username, age: inputValues.age, city: inputValues.city};

        const response = await fetch('/assets/usersData',{
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(newUser),
        });

        if(response.ok){
            const data =await response.json();
            console.log(data)
        } else {
            console.error('Hiba történt a felhasználó hozzáadása során')
        }
    }


form data kiynerése:

 const onSubmit = (event) => {
        event.preventDefault();

        const formData = new FormData(event.target);
        const formValues = Array.from(formData.entries());

           formObj = { ...formObj, sections: campaign.sections };

        addQueryCampaign(formObj)
 }

 ehhez firebaseQuery-t kell létrehozni:
 import { addDoc, collection, Timestamp } from "firebase/firestore";
import { getAppDb } from "../../firebase";

export default async function addQueryCampaign({ title, slug, setting, heroImg, releaseDate, sections }) {

    const db = getAppDb();
    const collCampaigns = collection(db, 'campaigns');

    const dbObj = {
        title,
        slug,
        setting,
        heroImg,
        sections,
        releaseDate: Timestamp.fromDate( new Date(releaseDate) )
    };

    const newDoc = await addDoc( collCampaigns, dbObj );

    console.log(newDoc);
}
